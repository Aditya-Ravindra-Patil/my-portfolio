{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"E:/MERN/Portfolio-website-main/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _regeneratorRuntime = require(\"E:/MERN/Portfolio-website-main/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar _asyncToGenerator = require(\"E:/MERN/Portfolio-website-main/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"E:/MERN/Portfolio-website-main/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"E:/MERN/Portfolio-website-main/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PolygonMaskInstance = void 0;\n\nvar Enums_1 = require(\"./Enums\");\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\n\nvar Enums_2 = require(\"../../Enums\");\n\nvar utils_1 = require(\"./utils\");\n\nvar PolygonMaskInstance = /*#__PURE__*/function () {\n  function PolygonMaskInstance(container) {\n    _classCallCheck(this, PolygonMaskInstance);\n\n    this.container = container;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.path2DSupported = !!window.Path2D;\n    this.options = new PolygonMask_1.PolygonMask();\n    this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n  }\n\n  _createClass(PolygonMaskInstance, [{\n    key: \"initAsync\",\n    value: function () {\n      var _initAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {\n        var polygonMaskOptions;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n                polygonMaskOptions = this.options;\n                this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n\n                if (!polygonMaskOptions.enable) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 6;\n                return this.initRawData();\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initAsync(_x) {\n        return _initAsync.apply(this, arguments);\n      }\n\n      return initAsync;\n    }()\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var _this = this;\n\n      var container = this.container;\n      var options = this.options;\n\n      if (!(options.enable && options.type !== Enums_1.Type.none)) {\n        return;\n      }\n\n      if (this.redrawTimeout) {\n        clearTimeout(this.redrawTimeout);\n      }\n\n      this.redrawTimeout = window.setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this.initRawData(true);\n\n              case 2:\n                container.particles.redraw();\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      })), 250);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      delete this.raw;\n      delete this.paths;\n    }\n  }, {\n    key: \"particlesInitialization\",\n    value: function particlesInitialization() {\n      var options = this.options;\n\n      if (options.enable && options.type === Enums_1.Type.inline && (options.inline.arrangement === Enums_1.InlineArrangement.onePerPoint || options.inline.arrangement === Enums_1.InlineArrangement.perPoint)) {\n        this.drawPoints();\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"particlePosition\",\n    value: function particlePosition(position) {\n      var _a, _b;\n\n      var options = this.options;\n\n      if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n        return;\n      }\n\n      return (0, Utils_1.deepExtend)({}, position ? position : this.randomPoint());\n    }\n  }, {\n    key: \"particleBounce\",\n    value: function particleBounce(particle, delta, direction) {\n      return this.polygonBounce(particle, delta, direction);\n    }\n  }, {\n    key: \"clickPositionValid\",\n    value: function clickPositionValid(position) {\n      var options = this.options;\n      return options.enable && options.type !== Enums_1.Type.none && options.type !== Enums_1.Type.inline && this.checkInsidePolygon(position);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(context) {\n      var _a;\n\n      if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n\n      var options = this.options;\n      var polygonDraw = options.draw;\n\n      if (!(options.enable && polygonDraw.enable)) {\n        return;\n      }\n\n      var rawData = this.raw;\n\n      var _iterator = _createForOfIteratorHelper(this.paths),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var path = _step.value;\n          var path2d = path.path2d;\n          var path2dSupported = this.path2DSupported;\n\n          if (!context) {\n            continue;\n          }\n\n          if (path2dSupported && path2d && this.offset) {\n            (0, utils_1.drawPolygonMaskPath)(context, path2d, polygonDraw.stroke, this.offset);\n          } else if (rawData) {\n            (0, utils_1.drawPolygonMask)(context, rawData, polygonDraw.stroke);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"polygonBounce\",\n    value: function polygonBounce(particle, _delta, direction) {\n      var options = this.options;\n\n      if (!this.raw || !options.enable || direction !== Enums_2.OutModeDirection.top) {\n        return false;\n      }\n\n      if (options.type === Enums_1.Type.inside || options.type === Enums_1.Type.outside) {\n        var closest, dx, dy;\n        var pos = particle.getPosition(),\n            radius = particle.getRadius();\n\n        for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n          var pi = this.raw[i],\n              pj = this.raw[j];\n          closest = (0, utils_1.calcClosestPtOnSegment)(pi, pj, pos);\n          var dist = (0, Utils_1.getDistances)(pos, closest);\n          var _ref2 = [dist.dx, dist.dy];\n          dx = _ref2[0];\n          dy = _ref2[1];\n\n          if (dist.distance < radius) {\n            (0, utils_1.segmentBounce)(pi, pj, particle.velocity);\n            return true;\n          }\n        }\n\n        if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n          var factor = {\n            x: 1,\n            y: 1\n          };\n\n          if (particle.position.x >= closest.x) {\n            factor.x = -1;\n          }\n\n          if (particle.position.y >= closest.y) {\n            factor.y = -1;\n          }\n\n          particle.position.x = closest.x + radius * 2 * factor.x;\n          particle.position.y = closest.y + radius * 2 * factor.y;\n          particle.velocity.mult(-1);\n          return true;\n        }\n      } else if (options.type === Enums_1.Type.inline && particle.initialPosition) {\n        var _dist = (0, Utils_1.getDistance)(particle.initialPosition, particle.getPosition());\n\n        if (_dist > this.polygonMaskMoveRadius) {\n          particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n          particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"checkInsidePolygon\",\n    value: function checkInsidePolygon(position) {\n      var _a, _b;\n\n      var container = this.container;\n      var options = this.options;\n\n      if (!options.enable || options.type === Enums_1.Type.none || options.type === Enums_1.Type.inline) {\n        return true;\n      }\n\n      if (!this.raw) {\n        throw new Error(Utils_1.Constants.noPolygonFound);\n      }\n\n      var canvasSize = container.canvas.size;\n      var x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\n      var y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n      var inside = false;\n\n      for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n        var pi = this.raw[i];\n        var pj = this.raw[j];\n        var intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n\n        if (intersect) {\n          inside = !inside;\n        }\n      }\n\n      return options.type === Enums_1.Type.inside ? inside : options.type === Enums_1.Type.outside ? !inside : false;\n    }\n  }, {\n    key: \"parseSvgPath\",\n    value: function parseSvgPath(xml, force) {\n      var _a, _b, _c;\n\n      var forceDownload = force !== null && force !== void 0 ? force : false;\n\n      if (this.paths !== undefined && !forceDownload) {\n        return this.raw;\n      }\n\n      var container = this.container;\n      var options = this.options;\n      var parser = new DOMParser();\n      var doc = parser.parseFromString(xml, \"image/svg+xml\");\n      var svg = doc.getElementsByTagName(\"svg\")[0];\n      var svgPaths = svg.getElementsByTagName(\"path\");\n\n      if (!svgPaths.length) {\n        svgPaths = doc.getElementsByTagName(\"path\");\n      }\n\n      this.paths = [];\n\n      for (var i = 0; i < svgPaths.length; i++) {\n        var path = svgPaths.item(i);\n\n        if (path) {\n          this.paths.push({\n            element: path,\n            length: path.getTotalLength()\n          });\n        }\n      }\n\n      var pxRatio = container.retina.pixelRatio;\n      var scale = options.scale / pxRatio;\n      this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n      this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n      var position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n        x: 50,\n        y: 50\n      };\n      this.offset = {\n        x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n        y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n      };\n      return (0, utils_1.parsePaths)(this.paths, scale, this.offset);\n    }\n  }, {\n    key: \"downloadSvgPath\",\n    value: function () {\n      var _downloadSvgPath = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(svgUrl, force) {\n        var options, url, forceDownload, req;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = this.options;\n                url = svgUrl || options.url;\n                forceDownload = force !== null && force !== void 0 ? force : false;\n\n                if (!(!url || this.paths !== undefined && !forceDownload)) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this.raw);\n\n              case 5:\n                _context3.next = 7;\n                return fetch(url);\n\n              case 7:\n                req = _context3.sent;\n\n                if (req.ok) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n\n              case 10:\n                _context3.t0 = this;\n                _context3.next = 13;\n                return req.text();\n\n              case 13:\n                _context3.t1 = _context3.sent;\n                _context3.t2 = force;\n                return _context3.abrupt(\"return\", _context3.t0.parseSvgPath.call(_context3.t0, _context3.t1, _context3.t2));\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function downloadSvgPath(_x2, _x3) {\n        return _downloadSvgPath.apply(this, arguments);\n      }\n\n      return downloadSvgPath;\n    }()\n  }, {\n    key: \"drawPoints\",\n    value: function drawPoints() {\n      if (!this.raw) {\n        return;\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(this.raw),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          this.container.particles.addParticle({\n            x: item.x,\n            y: item.y\n          });\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"randomPoint\",\n    value: function randomPoint() {\n      var container = this.container;\n      var options = this.options;\n      var position;\n\n      if (options.type === Enums_1.Type.inline) {\n        switch (options.inline.arrangement) {\n          case Enums_1.InlineArrangement.randomPoint:\n            position = this.getRandomPoint();\n            break;\n\n          case Enums_1.InlineArrangement.randomLength:\n            position = this.getRandomPointByLength();\n            break;\n\n          case Enums_1.InlineArrangement.equidistant:\n            position = this.getEquidistantPointByIndex(container.particles.count);\n            break;\n\n          case Enums_1.InlineArrangement.onePerPoint:\n          case Enums_1.InlineArrangement.perPoint:\n          default:\n            position = this.getPointByIndex(container.particles.count);\n        }\n      } else {\n        position = {\n          x: Math.random() * container.canvas.size.width,\n          y: Math.random() * container.canvas.size.height\n        };\n      }\n\n      if (this.checkInsidePolygon(position)) {\n        return position;\n      } else {\n        return this.randomPoint();\n      }\n    }\n  }, {\n    key: \"getRandomPoint\",\n    value: function getRandomPoint() {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n      }\n\n      var coords = (0, Utils_1.itemFromArray)(this.raw);\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"getRandomPointByLength\",\n    value: function getRandomPointByLength() {\n      var _a, _b, _c;\n\n      var options = this.options;\n\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n      }\n\n      var path = (0, Utils_1.itemFromArray)(this.paths);\n      var distance = Math.floor(Math.random() * path.length) + 1;\n      var point = path.element.getPointAtLength(distance);\n      return {\n        x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n        y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n      };\n    }\n  }, {\n    key: \"getEquidistantPointByIndex\",\n    value: function getEquidistantPointByIndex(index) {\n      var _a, _b, _c, _d, _e, _f, _g;\n\n      var options = this.container.actualOptions;\n      var polygonMaskOptions = this.options;\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n      var offset = 0;\n      var point;\n      var totalLength = this.paths.reduce(function (tot, path) {\n        return tot + path.length;\n      }, 0);\n      var distance = totalLength / options.particles.number.value;\n\n      var _iterator3 = _createForOfIteratorHelper(this.paths),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var path = _step3.value;\n          var pathDistance = distance * index - offset;\n\n          if (pathDistance <= path.length) {\n            point = path.element.getPointAtLength(pathDistance);\n            break;\n          } else {\n            offset += path.length;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return {\n        x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n        y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n      };\n    }\n  }, {\n    key: \"getPointByIndex\",\n    value: function getPointByIndex(index) {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n      }\n\n      var coords = this.raw[index % this.raw.length];\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"createPath2D\",\n    value: function createPath2D() {\n      var _this2 = this;\n\n      var _a, _b;\n\n      var options = this.options;\n\n      if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n\n      var _iterator4 = _createForOfIteratorHelper(this.paths),\n          _step4;\n\n      try {\n        var _loop = function _loop() {\n          var path = _step4.value;\n          var pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n\n          if (pathData) {\n            var path2d = new Path2D(pathData);\n            var matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n            var finalPath = new Path2D();\n            var transform = matrix.scale(options.scale);\n\n            if (finalPath.addPath) {\n              finalPath.addPath(path2d, transform);\n              path.path2d = finalPath;\n            } else {\n              delete path.path2d;\n            }\n          } else {\n            delete path.path2d;\n          }\n\n          if (path.path2d || !_this2.raw) {\n            return \"continue\";\n          }\n\n          path.path2d = new Path2D();\n          path.path2d.moveTo(_this2.raw[0].x, _this2.raw[0].y);\n\n          _this2.raw.forEach(function (pos, i) {\n            var _a;\n\n            if (i > 0) {\n              (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n            }\n          });\n\n          path.path2d.closePath();\n        };\n\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _ret = _loop();\n\n          if (_ret === \"continue\") continue;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"initRawData\",\n    value: function () {\n      var _initRawData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(force) {\n        var options, data, svg, path, namespaces;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = this.options;\n\n                if (!options.url) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                _context4.next = 4;\n                return this.downloadSvgPath(options.url, force);\n\n              case 4:\n                this.raw = _context4.sent;\n                _context4.next = 8;\n                break;\n\n              case 7:\n                if (options.data) {\n                  data = options.data;\n\n                  if (typeof data !== \"string\") {\n                    path = data.path instanceof Array ? data.path.map(function (t) {\n                      return \"<path d=\\\"\".concat(t, \"\\\" />\");\n                    }).join(\"\") : \"<path d=\\\"\".concat(data.path, \"\\\" />\");\n                    namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                    svg = \"<svg \".concat(namespaces, \" width=\\\"\").concat(data.size.width, \"\\\" height=\\\"\").concat(data.size.height, \"\\\">\").concat(path, \"</svg>\");\n                  } else {\n                    svg = data;\n                  }\n\n                  this.raw = this.parseSvgPath(svg, force);\n                }\n\n              case 8:\n                this.createPath2D();\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function initRawData(_x4) {\n        return _initRawData.apply(this, arguments);\n      }\n\n      return initRawData;\n    }()\n  }]);\n\n  return PolygonMaskInstance;\n}();\n\nexports.PolygonMaskInstance = PolygonMaskInstance;","map":{"version":3,"names":["Object","defineProperty","exports","value","PolygonMaskInstance","Enums_1","require","Utils_1","PolygonMask_1","Enums_2","utils_1","container","dimension","height","width","path2DSupported","window","Path2D","options","PolygonMask","polygonMaskMoveRadius","move","radius","retina","pixelRatio","load","polygon","polygonMaskOptions","enable","initRawData","type","Type","none","redrawTimeout","clearTimeout","setTimeout","particles","redraw","raw","paths","inline","arrangement","InlineArrangement","onePerPoint","perPoint","drawPoints","position","_a","_b","length","deepExtend","randomPoint","particle","delta","direction","polygonBounce","checkInsidePolygon","context","polygonDraw","draw","rawData","path","path2d","path2dSupported","offset","drawPolygonMaskPath","stroke","drawPolygonMask","_delta","OutModeDirection","top","inside","outside","closest","dx","dy","pos","getPosition","getRadius","i","j","pi","pj","calcClosestPtOnSegment","dist","getDistances","distance","segmentBounce","velocity","undefined","factor","x","y","mult","initialPosition","getDistance","Error","Constants","noPolygonFound","canvasSize","canvas","size","Math","random","intersect","xml","force","_c","forceDownload","parser","DOMParser","doc","parseFromString","svg","getElementsByTagName","svgPaths","item","push","element","getTotalLength","pxRatio","scale","parseFloat","getAttribute","parsePaths","svgUrl","url","fetch","req","ok","text","parseSvgPath","addParticle","getRandomPoint","randomLength","getRandomPointByLength","equidistant","getEquidistantPointByIndex","count","getPointByIndex","noPolygonDataLoaded","coords","itemFromArray","floor","point","getPointAtLength","index","_d","_e","_f","_g","actualOptions","totalLength","reduce","tot","number","pathDistance","pathData","matrix","document","createElementNS","createSVGMatrix","finalPath","transform","addPath","moveTo","forEach","lineTo","closePath","downloadSvgPath","data","Array","map","t","join","namespaces","createPath2D"],"sources":["E:/MERN/Portfolio-website-main/node_modules/tsparticles/Plugins/PolygonMask/PolygonMaskInstance.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PolygonMaskInstance = void 0;\nconst Enums_1 = require(\"./Enums\");\nconst Utils_1 = require(\"../../Utils\");\nconst PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\nconst Enums_2 = require(\"../../Enums\");\nconst utils_1 = require(\"./utils\");\nclass PolygonMaskInstance {\n    constructor(container) {\n        this.container = container;\n        this.dimension = {\n            height: 0,\n            width: 0,\n        };\n        this.path2DSupported = !!window.Path2D;\n        this.options = new PolygonMask_1.PolygonMask();\n        this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n    }\n    async initAsync(options) {\n        this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n        const polygonMaskOptions = this.options;\n        this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n        if (polygonMaskOptions.enable) {\n            await this.initRawData();\n        }\n    }\n    resize() {\n        const container = this.container;\n        const options = this.options;\n        if (!(options.enable && options.type !== Enums_1.Type.none)) {\n            return;\n        }\n        if (this.redrawTimeout) {\n            clearTimeout(this.redrawTimeout);\n        }\n        this.redrawTimeout = window.setTimeout(async () => {\n            await this.initRawData(true);\n            container.particles.redraw();\n        }, 250);\n    }\n    stop() {\n        delete this.raw;\n        delete this.paths;\n    }\n    particlesInitialization() {\n        const options = this.options;\n        if (options.enable &&\n            options.type === Enums_1.Type.inline &&\n            (options.inline.arrangement === Enums_1.InlineArrangement.onePerPoint ||\n                options.inline.arrangement === Enums_1.InlineArrangement.perPoint)) {\n            this.drawPoints();\n            return true;\n        }\n        return false;\n    }\n    particlePosition(position) {\n        var _a, _b;\n        const options = this.options;\n        if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n            return;\n        }\n        return (0, Utils_1.deepExtend)({}, position ? position : this.randomPoint());\n    }\n    particleBounce(particle, delta, direction) {\n        return this.polygonBounce(particle, delta, direction);\n    }\n    clickPositionValid(position) {\n        const options = this.options;\n        return (options.enable &&\n            options.type !== Enums_1.Type.none &&\n            options.type !== Enums_1.Type.inline &&\n            this.checkInsidePolygon(position));\n    }\n    draw(context) {\n        var _a;\n        if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        const options = this.options;\n        const polygonDraw = options.draw;\n        if (!(options.enable && polygonDraw.enable)) {\n            return;\n        }\n        const rawData = this.raw;\n        for (const path of this.paths) {\n            const path2d = path.path2d;\n            const path2dSupported = this.path2DSupported;\n            if (!context) {\n                continue;\n            }\n            if (path2dSupported && path2d && this.offset) {\n                (0, utils_1.drawPolygonMaskPath)(context, path2d, polygonDraw.stroke, this.offset);\n            }\n            else if (rawData) {\n                (0, utils_1.drawPolygonMask)(context, rawData, polygonDraw.stroke);\n            }\n        }\n    }\n    polygonBounce(particle, _delta, direction) {\n        const options = this.options;\n        if (!this.raw || !options.enable || direction !== Enums_2.OutModeDirection.top) {\n            return false;\n        }\n        if (options.type === Enums_1.Type.inside || options.type === Enums_1.Type.outside) {\n            let closest, dx, dy;\n            const pos = particle.getPosition(), radius = particle.getRadius();\n            for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n                const pi = this.raw[i], pj = this.raw[j];\n                closest = (0, utils_1.calcClosestPtOnSegment)(pi, pj, pos);\n                const dist = (0, Utils_1.getDistances)(pos, closest);\n                [dx, dy] = [dist.dx, dist.dy];\n                if (dist.distance < radius) {\n                    (0, utils_1.segmentBounce)(pi, pj, particle.velocity);\n                    return true;\n                }\n            }\n            if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n                const factor = { x: 1, y: 1 };\n                if (particle.position.x >= closest.x) {\n                    factor.x = -1;\n                }\n                if (particle.position.y >= closest.y) {\n                    factor.y = -1;\n                }\n                particle.position.x = closest.x + radius * 2 * factor.x;\n                particle.position.y = closest.y + radius * 2 * factor.y;\n                particle.velocity.mult(-1);\n                return true;\n            }\n        }\n        else if (options.type === Enums_1.Type.inline && particle.initialPosition) {\n            const dist = (0, Utils_1.getDistance)(particle.initialPosition, particle.getPosition());\n            if (dist > this.polygonMaskMoveRadius) {\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n                return true;\n            }\n        }\n        return false;\n    }\n    checkInsidePolygon(position) {\n        var _a, _b;\n        const container = this.container;\n        const options = this.options;\n        if (!options.enable || options.type === Enums_1.Type.none || options.type === Enums_1.Type.inline) {\n            return true;\n        }\n        if (!this.raw) {\n            throw new Error(Utils_1.Constants.noPolygonFound);\n        }\n        const canvasSize = container.canvas.size;\n        const x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\n        const y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n        let inside = false;\n        for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n            const pi = this.raw[i];\n            const pj = this.raw[j];\n            const intersect = pi.y > y !== pj.y > y && x < ((pj.x - pi.x) * (y - pi.y)) / (pj.y - pi.y) + pi.x;\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return options.type === Enums_1.Type.inside ? inside : options.type === Enums_1.Type.outside ? !inside : false;\n    }\n    parseSvgPath(xml, force) {\n        var _a, _b, _c;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (this.paths !== undefined && !forceDownload) {\n            return this.raw;\n        }\n        const container = this.container;\n        const options = this.options;\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(xml, \"image/svg+xml\");\n        const svg = doc.getElementsByTagName(\"svg\")[0];\n        let svgPaths = svg.getElementsByTagName(\"path\");\n        if (!svgPaths.length) {\n            svgPaths = doc.getElementsByTagName(\"path\");\n        }\n        this.paths = [];\n        for (let i = 0; i < svgPaths.length; i++) {\n            const path = svgPaths.item(i);\n            if (path) {\n                this.paths.push({\n                    element: path,\n                    length: path.getTotalLength(),\n                });\n            }\n        }\n        const pxRatio = container.retina.pixelRatio;\n        const scale = options.scale / pxRatio;\n        this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n        this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n        const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n            x: 50,\n            y: 50,\n        };\n        this.offset = {\n            x: (container.canvas.size.width * position.x) / (100 * pxRatio) - this.dimension.width / 2,\n            y: (container.canvas.size.height * position.y) / (100 * pxRatio) - this.dimension.height / 2,\n        };\n        return (0, utils_1.parsePaths)(this.paths, scale, this.offset);\n    }\n    async downloadSvgPath(svgUrl, force) {\n        const options = this.options;\n        const url = svgUrl || options.url;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (!url || (this.paths !== undefined && !forceDownload)) {\n            return this.raw;\n        }\n        const req = await fetch(url);\n        if (!req.ok) {\n            throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n        }\n        return this.parseSvgPath(await req.text(), force);\n    }\n    drawPoints() {\n        if (!this.raw) {\n            return;\n        }\n        for (const item of this.raw) {\n            this.container.particles.addParticle({\n                x: item.x,\n                y: item.y,\n            });\n        }\n    }\n    randomPoint() {\n        const container = this.container;\n        const options = this.options;\n        let position;\n        if (options.type === Enums_1.Type.inline) {\n            switch (options.inline.arrangement) {\n                case Enums_1.InlineArrangement.randomPoint:\n                    position = this.getRandomPoint();\n                    break;\n                case Enums_1.InlineArrangement.randomLength:\n                    position = this.getRandomPointByLength();\n                    break;\n                case Enums_1.InlineArrangement.equidistant:\n                    position = this.getEquidistantPointByIndex(container.particles.count);\n                    break;\n                case Enums_1.InlineArrangement.onePerPoint:\n                case Enums_1.InlineArrangement.perPoint:\n                default:\n                    position = this.getPointByIndex(container.particles.count);\n            }\n        }\n        else {\n            position = {\n                x: Math.random() * container.canvas.size.width,\n                y: Math.random() * container.canvas.size.height,\n            };\n        }\n        if (this.checkInsidePolygon(position)) {\n            return position;\n        }\n        else {\n            return this.randomPoint();\n        }\n    }\n    getRandomPoint() {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = (0, Utils_1.itemFromArray)(this.raw);\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    getRandomPointByLength() {\n        var _a, _b, _c;\n        const options = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        }\n        const path = (0, Utils_1.itemFromArray)(this.paths);\n        const distance = Math.floor(Math.random() * path.length) + 1;\n        const point = path.element.getPointAtLength(distance);\n        return {\n            x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n            y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0),\n        };\n    }\n    getEquidistantPointByIndex(index) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const options = this.container.actualOptions;\n        const polygonMaskOptions = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length))\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        let offset = 0;\n        let point;\n        const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0);\n        const distance = totalLength / options.particles.number.value;\n        for (const path of this.paths) {\n            const pathDistance = distance * index - offset;\n            if (pathDistance <= path.length) {\n                point = path.element.getPointAtLength(pathDistance);\n                break;\n            }\n            else {\n                offset += path.length;\n            }\n        }\n        return {\n            x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n            y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0),\n        };\n    }\n    getPointByIndex(index) {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = this.raw[index % this.raw.length];\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    createPath2D() {\n        var _a, _b;\n        const options = this.options;\n        if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        for (const path of this.paths) {\n            const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n            if (pathData) {\n                const path2d = new Path2D(pathData);\n                const matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n                const finalPath = new Path2D();\n                const transform = matrix.scale(options.scale);\n                if (finalPath.addPath) {\n                    finalPath.addPath(path2d, transform);\n                    path.path2d = finalPath;\n                }\n                else {\n                    delete path.path2d;\n                }\n            }\n            else {\n                delete path.path2d;\n            }\n            if (path.path2d || !this.raw) {\n                continue;\n            }\n            path.path2d = new Path2D();\n            path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n            this.raw.forEach((pos, i) => {\n                var _a;\n                if (i > 0) {\n                    (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n                }\n            });\n            path.path2d.closePath();\n        }\n    }\n    async initRawData(force) {\n        const options = this.options;\n        if (options.url) {\n            this.raw = await this.downloadSvgPath(options.url, force);\n        }\n        else if (options.data) {\n            const data = options.data;\n            let svg;\n            if (typeof data !== \"string\") {\n                const path = data.path instanceof Array\n                    ? data.path.map((t) => `<path d=\"${t}\" />`).join(\"\")\n                    : `<path d=\"${data.path}\" />`;\n                const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n            }\n            else {\n                svg = data;\n            }\n            this.raw = this.parseSvgPath(svg, force);\n        }\n        this.createPath2D();\n    }\n}\nexports.PolygonMaskInstance = PolygonMaskInstance;\n"],"mappings":"AAAA;;;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,mBAAR,GAA8B,KAAK,CAAnC;;AACA,IAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAME,aAAa,GAAGF,OAAO,CAAC,+BAAD,CAA7B;;AACA,IAAMG,OAAO,GAAGH,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAMI,OAAO,GAAGJ,OAAO,CAAC,SAAD,CAAvB;;IACMF,mB;EACF,6BAAYO,SAAZ,EAAuB;IAAA;;IACnB,KAAKA,SAAL,GAAiBA,SAAjB;IACA,KAAKC,SAAL,GAAiB;MACbC,MAAM,EAAE,CADK;MAEbC,KAAK,EAAE;IAFM,CAAjB;IAIA,KAAKC,eAAL,GAAuB,CAAC,CAACC,MAAM,CAACC,MAAhC;IACA,KAAKC,OAAL,GAAe,IAAIV,aAAa,CAACW,WAAlB,EAAf;IACA,KAAKC,qBAAL,GAA6B,KAAKF,OAAL,CAAaG,IAAb,CAAkBC,MAAlB,GAA2BX,SAAS,CAACY,MAAV,CAAiBC,UAAzE;EACH;;;;;gFACD,iBAAgBN,OAAhB;QAAA;QAAA;UAAA;YAAA;cAAA;gBACI,KAAKA,OAAL,CAAaO,IAAb,CAAkBP,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACQ,OAA5E;gBACMC,kBAFV,GAE+B,KAAKT,OAFpC;gBAGI,KAAKE,qBAAL,GAA6BO,kBAAkB,CAACN,IAAnB,CAAwBC,MAAxB,GAAiC,KAAKX,SAAL,CAAeY,MAAf,CAAsBC,UAApF;;gBAHJ,KAIQG,kBAAkB,CAACC,MAJ3B;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAKc,KAAKC,WAAL,EALd;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;WAQA,kBAAS;MAAA;;MACL,IAAMlB,SAAS,GAAG,KAAKA,SAAvB;MACA,IAAMO,OAAO,GAAG,KAAKA,OAArB;;MACA,IAAI,EAAEA,OAAO,CAACU,MAAR,IAAkBV,OAAO,CAACY,IAAR,KAAiBzB,OAAO,CAAC0B,IAAR,CAAaC,IAAlD,CAAJ,EAA6D;QACzD;MACH;;MACD,IAAI,KAAKC,aAAT,EAAwB;QACpBC,YAAY,CAAC,KAAKD,aAAN,CAAZ;MACH;;MACD,KAAKA,aAAL,GAAqBjB,MAAM,CAACmB,UAAP,wEAAkB;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAC7B,KAAI,CAACN,WAAL,CAAiB,IAAjB,CAD6B;;cAAA;gBAEnClB,SAAS,CAACyB,SAAV,CAAoBC,MAApB;;cAFmC;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAlB,IAGlB,GAHkB,CAArB;IAIH;;;WACD,gBAAO;MACH,OAAO,KAAKC,GAAZ;MACA,OAAO,KAAKC,KAAZ;IACH;;;WACD,mCAA0B;MACtB,IAAMrB,OAAO,GAAG,KAAKA,OAArB;;MACA,IAAIA,OAAO,CAACU,MAAR,IACAV,OAAO,CAACY,IAAR,KAAiBzB,OAAO,CAAC0B,IAAR,CAAaS,MAD9B,KAECtB,OAAO,CAACsB,MAAR,CAAeC,WAAf,KAA+BpC,OAAO,CAACqC,iBAAR,CAA0BC,WAAzD,IACGzB,OAAO,CAACsB,MAAR,CAAeC,WAAf,KAA+BpC,OAAO,CAACqC,iBAAR,CAA0BE,QAH7D,CAAJ,EAG4E;QACxE,KAAKC,UAAL;QACA,OAAO,IAAP;MACH;;MACD,OAAO,KAAP;IACH;;;WACD,0BAAiBC,QAAjB,EAA2B;MACvB,IAAIC,EAAJ,EAAQC,EAAR;;MACA,IAAM9B,OAAO,GAAG,KAAKA,OAArB;;MACA,IAAI,EAAEA,OAAO,CAACU,MAAR,IAAkB,CAAC,CAACoB,EAAE,GAAG,CAACD,EAAE,GAAG,KAAKT,GAAX,MAAoB,IAApB,IAA4BS,EAAE,KAAK,KAAK,CAAxC,GAA4C,KAAK,CAAjD,GAAqDA,EAAE,CAACE,MAA9D,MAA0E,IAA1E,IAAkFD,EAAE,KAAK,KAAK,CAA9F,GAAkGA,EAAlG,GAAuG,CAAxG,IAA6G,CAAjI,CAAJ,EAAyI;QACrI;MACH;;MACD,OAAO,CAAC,GAAGzC,OAAO,CAAC2C,UAAZ,EAAwB,EAAxB,EAA4BJ,QAAQ,GAAGA,QAAH,GAAc,KAAKK,WAAL,EAAlD,CAAP;IACH;;;WACD,wBAAeC,QAAf,EAAyBC,KAAzB,EAAgCC,SAAhC,EAA2C;MACvC,OAAO,KAAKC,aAAL,CAAmBH,QAAnB,EAA6BC,KAA7B,EAAoCC,SAApC,CAAP;IACH;;;WACD,4BAAmBR,QAAnB,EAA6B;MACzB,IAAM5B,OAAO,GAAG,KAAKA,OAArB;MACA,OAAQA,OAAO,CAACU,MAAR,IACJV,OAAO,CAACY,IAAR,KAAiBzB,OAAO,CAAC0B,IAAR,CAAaC,IAD1B,IAEJd,OAAO,CAACY,IAAR,KAAiBzB,OAAO,CAAC0B,IAAR,CAAaS,MAF1B,IAGJ,KAAKgB,kBAAL,CAAwBV,QAAxB,CAHJ;IAIH;;;WACD,cAAKW,OAAL,EAAc;MACV,IAAIV,EAAJ;;MACA,IAAI,EAAE,CAACA,EAAE,GAAG,KAAKR,KAAX,MAAsB,IAAtB,IAA8BQ,EAAE,KAAK,KAAK,CAA1C,GAA8C,KAAK,CAAnD,GAAuDA,EAAE,CAACE,MAA5D,CAAJ,EAAyE;QACrE;MACH;;MACD,IAAM/B,OAAO,GAAG,KAAKA,OAArB;MACA,IAAMwC,WAAW,GAAGxC,OAAO,CAACyC,IAA5B;;MACA,IAAI,EAAEzC,OAAO,CAACU,MAAR,IAAkB8B,WAAW,CAAC9B,MAAhC,CAAJ,EAA6C;QACzC;MACH;;MACD,IAAMgC,OAAO,GAAG,KAAKtB,GAArB;;MAVU,2CAWS,KAAKC,KAXd;MAAA;;MAAA;QAWV,oDAA+B;UAAA,IAApBsB,IAAoB;UAC3B,IAAMC,MAAM,GAAGD,IAAI,CAACC,MAApB;UACA,IAAMC,eAAe,GAAG,KAAKhD,eAA7B;;UACA,IAAI,CAAC0C,OAAL,EAAc;YACV;UACH;;UACD,IAAIM,eAAe,IAAID,MAAnB,IAA6B,KAAKE,MAAtC,EAA8C;YAC1C,CAAC,GAAGtD,OAAO,CAACuD,mBAAZ,EAAiCR,OAAjC,EAA0CK,MAA1C,EAAkDJ,WAAW,CAACQ,MAA9D,EAAsE,KAAKF,MAA3E;UACH,CAFD,MAGK,IAAIJ,OAAJ,EAAa;YACd,CAAC,GAAGlD,OAAO,CAACyD,eAAZ,EAA6BV,OAA7B,EAAsCG,OAAtC,EAA+CF,WAAW,CAACQ,MAA3D;UACH;QACJ;MAvBS;QAAA;MAAA;QAAA;MAAA;IAwBb;;;WACD,uBAAcd,QAAd,EAAwBgB,MAAxB,EAAgCd,SAAhC,EAA2C;MACvC,IAAMpC,OAAO,GAAG,KAAKA,OAArB;;MACA,IAAI,CAAC,KAAKoB,GAAN,IAAa,CAACpB,OAAO,CAACU,MAAtB,IAAgC0B,SAAS,KAAK7C,OAAO,CAAC4D,gBAAR,CAAyBC,GAA3E,EAAgF;QAC5E,OAAO,KAAP;MACH;;MACD,IAAIpD,OAAO,CAACY,IAAR,KAAiBzB,OAAO,CAAC0B,IAAR,CAAawC,MAA9B,IAAwCrD,OAAO,CAACY,IAAR,KAAiBzB,OAAO,CAAC0B,IAAR,CAAayC,OAA1E,EAAmF;QAC/E,IAAIC,OAAJ,EAAaC,EAAb,EAAiBC,EAAjB;QACA,IAAMC,GAAG,GAAGxB,QAAQ,CAACyB,WAAT,EAAZ;QAAA,IAAoCvD,MAAM,GAAG8B,QAAQ,CAAC0B,SAAT,EAA7C;;QACA,KAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,KAAK1C,GAAL,CAASW,MAAT,GAAkB,CAAtC,EAAyC8B,CAAC,GAAG,KAAKzC,GAAL,CAASW,MAAtD,EAA8D+B,CAAC,GAAGD,CAAC,EAAnE,EAAuE;UACnE,IAAME,EAAE,GAAG,KAAK3C,GAAL,CAASyC,CAAT,CAAX;UAAA,IAAwBG,EAAE,GAAG,KAAK5C,GAAL,CAAS0C,CAAT,CAA7B;UACAP,OAAO,GAAG,CAAC,GAAG/D,OAAO,CAACyE,sBAAZ,EAAoCF,EAApC,EAAwCC,EAAxC,EAA4CN,GAA5C,CAAV;UACA,IAAMQ,IAAI,GAAG,CAAC,GAAG7E,OAAO,CAAC8E,YAAZ,EAA0BT,GAA1B,EAA+BH,OAA/B,CAAb;UAHmE,YAIxD,CAACW,IAAI,CAACV,EAAN,EAAUU,IAAI,CAACT,EAAf,CAJwD;UAIlED,EAJkE;UAI9DC,EAJ8D;;UAKnE,IAAIS,IAAI,CAACE,QAAL,GAAgBhE,MAApB,EAA4B;YACxB,CAAC,GAAGZ,OAAO,CAAC6E,aAAZ,EAA2BN,EAA3B,EAA+BC,EAA/B,EAAmC9B,QAAQ,CAACoC,QAA5C;YACA,OAAO,IAAP;UACH;QACJ;;QACD,IAAIf,OAAO,IAAIC,EAAE,KAAKe,SAAlB,IAA+Bd,EAAE,KAAKc,SAAtC,IAAmD,CAAC,KAAKjC,kBAAL,CAAwBoB,GAAxB,CAAxD,EAAsF;UAClF,IAAMc,MAAM,GAAG;YAAEC,CAAC,EAAE,CAAL;YAAQC,CAAC,EAAE;UAAX,CAAf;;UACA,IAAIxC,QAAQ,CAACN,QAAT,CAAkB6C,CAAlB,IAAuBlB,OAAO,CAACkB,CAAnC,EAAsC;YAClCD,MAAM,CAACC,CAAP,GAAW,CAAC,CAAZ;UACH;;UACD,IAAIvC,QAAQ,CAACN,QAAT,CAAkB8C,CAAlB,IAAuBnB,OAAO,CAACmB,CAAnC,EAAsC;YAClCF,MAAM,CAACE,CAAP,GAAW,CAAC,CAAZ;UACH;;UACDxC,QAAQ,CAACN,QAAT,CAAkB6C,CAAlB,GAAsBlB,OAAO,CAACkB,CAAR,GAAYrE,MAAM,GAAG,CAAT,GAAaoE,MAAM,CAACC,CAAtD;UACAvC,QAAQ,CAACN,QAAT,CAAkB8C,CAAlB,GAAsBnB,OAAO,CAACmB,CAAR,GAAYtE,MAAM,GAAG,CAAT,GAAaoE,MAAM,CAACE,CAAtD;UACAxC,QAAQ,CAACoC,QAAT,CAAkBK,IAAlB,CAAuB,CAAC,CAAxB;UACA,OAAO,IAAP;QACH;MACJ,CA1BD,MA2BK,IAAI3E,OAAO,CAACY,IAAR,KAAiBzB,OAAO,CAAC0B,IAAR,CAAaS,MAA9B,IAAwCY,QAAQ,CAAC0C,eAArD,EAAsE;QACvE,IAAMV,KAAI,GAAG,CAAC,GAAG7E,OAAO,CAACwF,WAAZ,EAAyB3C,QAAQ,CAAC0C,eAAlC,EAAmD1C,QAAQ,CAACyB,WAAT,EAAnD,CAAb;;QACA,IAAIO,KAAI,GAAG,KAAKhE,qBAAhB,EAAuC;UACnCgC,QAAQ,CAACoC,QAAT,CAAkBG,CAAlB,GAAsBvC,QAAQ,CAACoC,QAAT,CAAkBI,CAAlB,GAAsB,CAAtB,GAA0BxC,QAAQ,CAACoC,QAAT,CAAkBG,CAAlE;UACAvC,QAAQ,CAACoC,QAAT,CAAkBI,CAAlB,GAAsBxC,QAAQ,CAACoC,QAAT,CAAkBG,CAAlB,GAAsB,CAAtB,GAA0BvC,QAAQ,CAACoC,QAAT,CAAkBI,CAAlE;UACA,OAAO,IAAP;QACH;MACJ;;MACD,OAAO,KAAP;IACH;;;WACD,4BAAmB9C,QAAnB,EAA6B;MACzB,IAAIC,EAAJ,EAAQC,EAAR;;MACA,IAAMrC,SAAS,GAAG,KAAKA,SAAvB;MACA,IAAMO,OAAO,GAAG,KAAKA,OAArB;;MACA,IAAI,CAACA,OAAO,CAACU,MAAT,IAAmBV,OAAO,CAACY,IAAR,KAAiBzB,OAAO,CAAC0B,IAAR,CAAaC,IAAjD,IAAyDd,OAAO,CAACY,IAAR,KAAiBzB,OAAO,CAAC0B,IAAR,CAAaS,MAA3F,EAAmG;QAC/F,OAAO,IAAP;MACH;;MACD,IAAI,CAAC,KAAKF,GAAV,EAAe;QACX,MAAM,IAAI0D,KAAJ,CAAUzF,OAAO,CAAC0F,SAAR,CAAkBC,cAA5B,CAAN;MACH;;MACD,IAAMC,UAAU,GAAGxF,SAAS,CAACyF,MAAV,CAAiBC,IAApC;MACA,IAAMV,CAAC,GAAG,CAAC5C,EAAE,GAAGD,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAAC6C,CAAnE,MAA0E,IAA1E,IAAkF5C,EAAE,KAAK,KAAK,CAA9F,GAAkGA,EAAlG,GAAuGuD,IAAI,CAACC,MAAL,KAAgBJ,UAAU,CAACrF,KAA5I;MACA,IAAM8E,CAAC,GAAG,CAAC5C,EAAE,GAAGF,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAAC8C,CAAnE,MAA0E,IAA1E,IAAkF5C,EAAE,KAAK,KAAK,CAA9F,GAAkGA,EAAlG,GAAuGsD,IAAI,CAACC,MAAL,KAAgBJ,UAAU,CAACtF,MAA5I;MACA,IAAI0D,MAAM,GAAG,KAAb;;MACA,KAAK,IAAIQ,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,KAAK1C,GAAL,CAASW,MAAT,GAAkB,CAAtC,EAAyC8B,CAAC,GAAG,KAAKzC,GAAL,CAASW,MAAtD,EAA8D+B,CAAC,GAAGD,CAAC,EAAnE,EAAuE;QACnE,IAAME,EAAE,GAAG,KAAK3C,GAAL,CAASyC,CAAT,CAAX;QACA,IAAMG,EAAE,GAAG,KAAK5C,GAAL,CAAS0C,CAAT,CAAX;QACA,IAAMwB,SAAS,GAAGvB,EAAE,CAACW,CAAH,GAAOA,CAAP,KAAaV,EAAE,CAACU,CAAH,GAAOA,CAApB,IAAyBD,CAAC,GAAI,CAACT,EAAE,CAACS,CAAH,GAAOV,EAAE,CAACU,CAAX,KAAiBC,CAAC,GAAGX,EAAE,CAACW,CAAxB,CAAD,IAAgCV,EAAE,CAACU,CAAH,GAAOX,EAAE,CAACW,CAA1C,IAA+CX,EAAE,CAACU,CAAjG;;QACA,IAAIa,SAAJ,EAAe;UACXjC,MAAM,GAAG,CAACA,MAAV;QACH;MACJ;;MACD,OAAOrD,OAAO,CAACY,IAAR,KAAiBzB,OAAO,CAAC0B,IAAR,CAAawC,MAA9B,GAAuCA,MAAvC,GAAgDrD,OAAO,CAACY,IAAR,KAAiBzB,OAAO,CAAC0B,IAAR,CAAayC,OAA9B,GAAwC,CAACD,MAAzC,GAAkD,KAAzG;IACH;;;WACD,sBAAakC,GAAb,EAAkBC,KAAlB,EAAyB;MACrB,IAAI3D,EAAJ,EAAQC,EAAR,EAAY2D,EAAZ;;MACA,IAAMC,aAAa,GAAGF,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqCA,KAArC,GAA6C,KAAnE;;MACA,IAAI,KAAKnE,KAAL,KAAekD,SAAf,IAA4B,CAACmB,aAAjC,EAAgD;QAC5C,OAAO,KAAKtE,GAAZ;MACH;;MACD,IAAM3B,SAAS,GAAG,KAAKA,SAAvB;MACA,IAAMO,OAAO,GAAG,KAAKA,OAArB;MACA,IAAM2F,MAAM,GAAG,IAAIC,SAAJ,EAAf;MACA,IAAMC,GAAG,GAAGF,MAAM,CAACG,eAAP,CAAuBP,GAAvB,EAA4B,eAA5B,CAAZ;MACA,IAAMQ,GAAG,GAAGF,GAAG,CAACG,oBAAJ,CAAyB,KAAzB,EAAgC,CAAhC,CAAZ;MACA,IAAIC,QAAQ,GAAGF,GAAG,CAACC,oBAAJ,CAAyB,MAAzB,CAAf;;MACA,IAAI,CAACC,QAAQ,CAAClE,MAAd,EAAsB;QAClBkE,QAAQ,GAAGJ,GAAG,CAACG,oBAAJ,CAAyB,MAAzB,CAAX;MACH;;MACD,KAAK3E,KAAL,GAAa,EAAb;;MACA,KAAK,IAAIwC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoC,QAAQ,CAAClE,MAA7B,EAAqC8B,CAAC,EAAtC,EAA0C;QACtC,IAAMlB,IAAI,GAAGsD,QAAQ,CAACC,IAAT,CAAcrC,CAAd,CAAb;;QACA,IAAIlB,IAAJ,EAAU;UACN,KAAKtB,KAAL,CAAW8E,IAAX,CAAgB;YACZC,OAAO,EAAEzD,IADG;YAEZZ,MAAM,EAAEY,IAAI,CAAC0D,cAAL;UAFI,CAAhB;QAIH;MACJ;;MACD,IAAMC,OAAO,GAAG7G,SAAS,CAACY,MAAV,CAAiBC,UAAjC;MACA,IAAMiG,KAAK,GAAGvG,OAAO,CAACuG,KAAR,GAAgBD,OAA9B;MACA,KAAK5G,SAAL,CAAeE,KAAf,GAAuB4G,UAAU,CAAC,CAAC3E,EAAE,GAAGkE,GAAG,CAACU,YAAJ,CAAiB,OAAjB,CAAN,MAAqC,IAArC,IAA6C5E,EAAE,KAAK,KAAK,CAAzD,GAA6DA,EAA7D,GAAkE,GAAnE,CAAV,GAAoF0E,KAA3G;MACA,KAAK7G,SAAL,CAAeC,MAAf,GAAwB6G,UAAU,CAAC,CAAC1E,EAAE,GAAGiE,GAAG,CAACU,YAAJ,CAAiB,QAAjB,CAAN,MAAsC,IAAtC,IAA8C3E,EAAE,KAAK,KAAK,CAA1D,GAA8DA,EAA9D,GAAmE,GAApE,CAAV,GAAqFyE,KAA7G;MACA,IAAM3E,QAAQ,GAAG,CAAC6D,EAAE,GAAGzF,OAAO,CAAC4B,QAAd,MAA4B,IAA5B,IAAoC6D,EAAE,KAAK,KAAK,CAAhD,GAAoDA,EAApD,GAAyD;QACtEhB,CAAC,EAAE,EADmE;QAEtEC,CAAC,EAAE;MAFmE,CAA1E;MAIA,KAAK5B,MAAL,GAAc;QACV2B,CAAC,EAAGhF,SAAS,CAACyF,MAAV,CAAiBC,IAAjB,CAAsBvF,KAAtB,GAA8BgC,QAAQ,CAAC6C,CAAxC,IAA8C,MAAM6B,OAApD,IAA+D,KAAK5G,SAAL,CAAeE,KAAf,GAAuB,CAD/E;QAEV8E,CAAC,EAAGjF,SAAS,CAACyF,MAAV,CAAiBC,IAAjB,CAAsBxF,MAAtB,GAA+BiC,QAAQ,CAAC8C,CAAzC,IAA+C,MAAM4B,OAArD,IAAgE,KAAK5G,SAAL,CAAeC,MAAf,GAAwB;MAFjF,CAAd;MAIA,OAAO,CAAC,GAAGH,OAAO,CAACkH,UAAZ,EAAwB,KAAKrF,KAA7B,EAAoCkF,KAApC,EAA2C,KAAKzD,MAAhD,CAAP;IACH;;;;sFACD,kBAAsB6D,MAAtB,EAA8BnB,KAA9B;QAAA;QAAA;UAAA;YAAA;cAAA;gBACUxF,OADV,GACoB,KAAKA,OADzB;gBAEU4G,GAFV,GAEgBD,MAAM,IAAI3G,OAAO,CAAC4G,GAFlC;gBAGUlB,aAHV,GAG0BF,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqCA,KAArC,GAA6C,KAHvE;;gBAAA,MAIQ,CAACoB,GAAD,IAAS,KAAKvF,KAAL,KAAekD,SAAf,IAA4B,CAACmB,aAJ9C;kBAAA;kBAAA;gBAAA;;gBAAA,kCAKe,KAAKtE,GALpB;;cAAA;gBAAA;gBAAA,OAOsByF,KAAK,CAACD,GAAD,CAP3B;;cAAA;gBAOUE,GAPV;;gBAAA,IAQSA,GAAG,CAACC,EARb;kBAAA;kBAAA;gBAAA;;gBAAA,MASc,IAAIjC,KAAJ,CAAU,iEAAV,CATd;;cAAA;gBAAA,eAWW,IAXX;gBAAA;gBAAA,OAWmCgC,GAAG,CAACE,IAAJ,EAXnC;;cAAA;gBAAA;gBAAA,eAW+CxB,KAX/C;gBAAA,+CAWgByB,YAXhB;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;WAaA,sBAAa;MACT,IAAI,CAAC,KAAK7F,GAAV,EAAe;QACX;MACH;;MAHQ,4CAIU,KAAKA,GAJf;MAAA;;MAAA;QAIT,uDAA6B;UAAA,IAAlB8E,IAAkB;UACzB,KAAKzG,SAAL,CAAeyB,SAAf,CAAyBgG,WAAzB,CAAqC;YACjCzC,CAAC,EAAEyB,IAAI,CAACzB,CADyB;YAEjCC,CAAC,EAAEwB,IAAI,CAACxB;UAFyB,CAArC;QAIH;MATQ;QAAA;MAAA;QAAA;MAAA;IAUZ;;;WACD,uBAAc;MACV,IAAMjF,SAAS,GAAG,KAAKA,SAAvB;MACA,IAAMO,OAAO,GAAG,KAAKA,OAArB;MACA,IAAI4B,QAAJ;;MACA,IAAI5B,OAAO,CAACY,IAAR,KAAiBzB,OAAO,CAAC0B,IAAR,CAAaS,MAAlC,EAA0C;QACtC,QAAQtB,OAAO,CAACsB,MAAR,CAAeC,WAAvB;UACI,KAAKpC,OAAO,CAACqC,iBAAR,CAA0BS,WAA/B;YACIL,QAAQ,GAAG,KAAKuF,cAAL,EAAX;YACA;;UACJ,KAAKhI,OAAO,CAACqC,iBAAR,CAA0B4F,YAA/B;YACIxF,QAAQ,GAAG,KAAKyF,sBAAL,EAAX;YACA;;UACJ,KAAKlI,OAAO,CAACqC,iBAAR,CAA0B8F,WAA/B;YACI1F,QAAQ,GAAG,KAAK2F,0BAAL,CAAgC9H,SAAS,CAACyB,SAAV,CAAoBsG,KAApD,CAAX;YACA;;UACJ,KAAKrI,OAAO,CAACqC,iBAAR,CAA0BC,WAA/B;UACA,KAAKtC,OAAO,CAACqC,iBAAR,CAA0BE,QAA/B;UACA;YACIE,QAAQ,GAAG,KAAK6F,eAAL,CAAqBhI,SAAS,CAACyB,SAAV,CAAoBsG,KAAzC,CAAX;QAbR;MAeH,CAhBD,MAiBK;QACD5F,QAAQ,GAAG;UACP6C,CAAC,EAAEW,IAAI,CAACC,MAAL,KAAgB5F,SAAS,CAACyF,MAAV,CAAiBC,IAAjB,CAAsBvF,KADlC;UAEP8E,CAAC,EAAEU,IAAI,CAACC,MAAL,KAAgB5F,SAAS,CAACyF,MAAV,CAAiBC,IAAjB,CAAsBxF;QAFlC,CAAX;MAIH;;MACD,IAAI,KAAK2C,kBAAL,CAAwBV,QAAxB,CAAJ,EAAuC;QACnC,OAAOA,QAAP;MACH,CAFD,MAGK;QACD,OAAO,KAAKK,WAAL,EAAP;MACH;IACJ;;;WACD,0BAAiB;MACb,IAAI,CAAC,KAAKb,GAAN,IAAa,CAAC,KAAKA,GAAL,CAASW,MAA3B,EAAmC;QAC/B,MAAM,IAAI+C,KAAJ,CAAUzF,OAAO,CAAC0F,SAAR,CAAkB2C,mBAA5B,CAAN;MACH;;MACD,IAAMC,MAAM,GAAG,CAAC,GAAGtI,OAAO,CAACuI,aAAZ,EAA2B,KAAKxG,GAAhC,CAAf;MACA,OAAO;QACHqD,CAAC,EAAEkD,MAAM,CAAClD,CADP;QAEHC,CAAC,EAAEiD,MAAM,CAACjD;MAFP,CAAP;IAIH;;;WACD,kCAAyB;MACrB,IAAI7C,EAAJ,EAAQC,EAAR,EAAY2D,EAAZ;;MACA,IAAMzF,OAAO,GAAG,KAAKA,OAArB;;MACA,IAAI,CAAC,KAAKoB,GAAN,IAAa,CAAC,KAAKA,GAAL,CAASW,MAAvB,IAAiC,EAAE,CAACF,EAAE,GAAG,KAAKR,KAAX,MAAsB,IAAtB,IAA8BQ,EAAE,KAAK,KAAK,CAA1C,GAA8C,KAAK,CAAnD,GAAuDA,EAAE,CAACE,MAA5D,CAArC,EAA0G;QACtG,MAAM,IAAI+C,KAAJ,CAAUzF,OAAO,CAAC0F,SAAR,CAAkB2C,mBAA5B,CAAN;MACH;;MACD,IAAM/E,IAAI,GAAG,CAAC,GAAGtD,OAAO,CAACuI,aAAZ,EAA2B,KAAKvG,KAAhC,CAAb;MACA,IAAM+C,QAAQ,GAAGgB,IAAI,CAACyC,KAAL,CAAWzC,IAAI,CAACC,MAAL,KAAgB1C,IAAI,CAACZ,MAAhC,IAA0C,CAA3D;MACA,IAAM+F,KAAK,GAAGnF,IAAI,CAACyD,OAAL,CAAa2B,gBAAb,CAA8B3D,QAA9B,CAAd;MACA,OAAO;QACHK,CAAC,EAAEqD,KAAK,CAACrD,CAAN,GAAUzE,OAAO,CAACuG,KAAlB,IAA2B,CAAC,CAACzE,EAAE,GAAG,KAAKgB,MAAX,MAAuB,IAAvB,IAA+BhB,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAAC2C,CAA5D,KAAkE,CAA7F,CADA;QAEHC,CAAC,EAAEoD,KAAK,CAACpD,CAAN,GAAU1E,OAAO,CAACuG,KAAlB,IAA2B,CAAC,CAACd,EAAE,GAAG,KAAK3C,MAAX,MAAuB,IAAvB,IAA+B2C,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACf,CAA5D,KAAkE,CAA7F;MAFA,CAAP;IAIH;;;WACD,oCAA2BsD,KAA3B,EAAkC;MAC9B,IAAInG,EAAJ,EAAQC,EAAR,EAAY2D,EAAZ,EAAgBwC,EAAhB,EAAoBC,EAApB,EAAwBC,EAAxB,EAA4BC,EAA5B;;MACA,IAAMpI,OAAO,GAAG,KAAKP,SAAL,CAAe4I,aAA/B;MACA,IAAM5H,kBAAkB,GAAG,KAAKT,OAAhC;MACA,IAAI,CAAC,KAAKoB,GAAN,IAAa,CAAC,KAAKA,GAAL,CAASW,MAAvB,IAAiC,EAAE,CAACF,EAAE,GAAG,KAAKR,KAAX,MAAsB,IAAtB,IAA8BQ,EAAE,KAAK,KAAK,CAA1C,GAA8C,KAAK,CAAnD,GAAuDA,EAAE,CAACE,MAA5D,CAArC,EACI,MAAM,IAAI+C,KAAJ,CAAUzF,OAAO,CAAC0F,SAAR,CAAkB2C,mBAA5B,CAAN;MACJ,IAAI5E,MAAM,GAAG,CAAb;MACA,IAAIgF,KAAJ;MACA,IAAMQ,WAAW,GAAG,KAAKjH,KAAL,CAAWkH,MAAX,CAAkB,UAACC,GAAD,EAAM7F,IAAN;QAAA,OAAe6F,GAAG,GAAG7F,IAAI,CAACZ,MAA1B;MAAA,CAAlB,EAAoD,CAApD,CAApB;MACA,IAAMqC,QAAQ,GAAGkE,WAAW,GAAGtI,OAAO,CAACkB,SAAR,CAAkBuH,MAAlB,CAAyBxJ,KAAxD;;MAT8B,4CAUX,KAAKoC,KAVM;MAAA;;MAAA;QAU9B,uDAA+B;UAAA,IAApBsB,IAAoB;UAC3B,IAAM+F,YAAY,GAAGtE,QAAQ,GAAG4D,KAAX,GAAmBlF,MAAxC;;UACA,IAAI4F,YAAY,IAAI/F,IAAI,CAACZ,MAAzB,EAAiC;YAC7B+F,KAAK,GAAGnF,IAAI,CAACyD,OAAL,CAAa2B,gBAAb,CAA8BW,YAA9B,CAAR;YACA;UACH,CAHD,MAIK;YACD5F,MAAM,IAAIH,IAAI,CAACZ,MAAf;UACH;QACJ;MAnB6B;QAAA;MAAA;QAAA;MAAA;;MAoB9B,OAAO;QACH0C,CAAC,EAAE,CAAC,CAAC3C,EAAE,GAAGgG,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACrD,CAA1D,MAAiE,IAAjE,IAAyE3C,EAAE,KAAK,KAAK,CAArF,GAAyFA,EAAzF,GAA8F,CAA/F,IAAoGrB,kBAAkB,CAAC8F,KAAvH,IAAgI,CAAC0B,EAAE,GAAG,CAACxC,EAAE,GAAG,KAAK3C,MAAX,MAAuB,IAAvB,IAA+B2C,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAAChB,CAAjE,MAAwE,IAAxE,IAAgFwD,EAAE,KAAK,KAAK,CAA5F,GAAgGA,EAAhG,GAAqG,CAArO,CADA;QAEHvD,CAAC,EAAE,CAAC,CAACwD,EAAE,GAAGJ,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACpD,CAA1D,MAAiE,IAAjE,IAAyEwD,EAAE,KAAK,KAAK,CAArF,GAAyFA,EAAzF,GAA8F,CAA/F,IAAoGzH,kBAAkB,CAAC8F,KAAvH,IAAgI,CAAC6B,EAAE,GAAG,CAACD,EAAE,GAAG,KAAKrF,MAAX,MAAuB,IAAvB,IAA+BqF,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACzD,CAAjE,MAAwE,IAAxE,IAAgF0D,EAAE,KAAK,KAAK,CAA5F,GAAgGA,EAAhG,GAAqG,CAArO;MAFA,CAAP;IAIH;;;WACD,yBAAgBJ,KAAhB,EAAuB;MACnB,IAAI,CAAC,KAAK5G,GAAN,IAAa,CAAC,KAAKA,GAAL,CAASW,MAA3B,EAAmC;QAC/B,MAAM,IAAI+C,KAAJ,CAAUzF,OAAO,CAAC0F,SAAR,CAAkB2C,mBAA5B,CAAN;MACH;;MACD,IAAMC,MAAM,GAAG,KAAKvG,GAAL,CAAS4G,KAAK,GAAG,KAAK5G,GAAL,CAASW,MAA1B,CAAf;MACA,OAAO;QACH0C,CAAC,EAAEkD,MAAM,CAAClD,CADP;QAEHC,CAAC,EAAEiD,MAAM,CAACjD;MAFP,CAAP;IAIH;;;WACD,wBAAe;MAAA;;MACX,IAAI7C,EAAJ,EAAQC,EAAR;;MACA,IAAM9B,OAAO,GAAG,KAAKA,OAArB;;MACA,IAAI,CAAC,KAAKH,eAAN,IAAyB,EAAE,CAACgC,EAAE,GAAG,KAAKR,KAAX,MAAsB,IAAtB,IAA8BQ,EAAE,KAAK,KAAK,CAA1C,GAA8C,KAAK,CAAnD,GAAuDA,EAAE,CAACE,MAA5D,CAA7B,EAAkG;QAC9F;MACH;;MALU,4CAMQ,KAAKV,KANb;MAAA;;MAAA;QAAA;UAAA,IAMAsB,IANA;UAOP,IAAMgG,QAAQ,GAAG,CAAC7G,EAAE,GAAGa,IAAI,CAACyD,OAAX,MAAwB,IAAxB,IAAgCtE,EAAE,KAAK,KAAK,CAA5C,GAAgD,KAAK,CAArD,GAAyDA,EAAE,CAAC2E,YAAH,CAAgB,GAAhB,CAA1E;;UACA,IAAIkC,QAAJ,EAAc;YACV,IAAM/F,MAAM,GAAG,IAAI7C,MAAJ,CAAW4I,QAAX,CAAf;YACA,IAAMC,MAAM,GAAGC,QAAQ,CAACC,eAAT,CAAyB,4BAAzB,EAAuD,KAAvD,EAA8DC,eAA9D,EAAf;YACA,IAAMC,SAAS,GAAG,IAAIjJ,MAAJ,EAAlB;YACA,IAAMkJ,SAAS,GAAGL,MAAM,CAACrC,KAAP,CAAavG,OAAO,CAACuG,KAArB,CAAlB;;YACA,IAAIyC,SAAS,CAACE,OAAd,EAAuB;cACnBF,SAAS,CAACE,OAAV,CAAkBtG,MAAlB,EAA0BqG,SAA1B;cACAtG,IAAI,CAACC,MAAL,GAAcoG,SAAd;YACH,CAHD,MAIK;cACD,OAAOrG,IAAI,CAACC,MAAZ;YACH;UACJ,CAZD,MAaK;YACD,OAAOD,IAAI,CAACC,MAAZ;UACH;;UACD,IAAID,IAAI,CAACC,MAAL,IAAe,CAAC,MAAI,CAACxB,GAAzB,EAA8B;YAC1B;UACH;;UACDuB,IAAI,CAACC,MAAL,GAAc,IAAI7C,MAAJ,EAAd;UACA4C,IAAI,CAACC,MAAL,CAAYuG,MAAZ,CAAmB,MAAI,CAAC/H,GAAL,CAAS,CAAT,EAAYqD,CAA/B,EAAkC,MAAI,CAACrD,GAAL,CAAS,CAAT,EAAYsD,CAA9C;;UACA,MAAI,CAACtD,GAAL,CAASgI,OAAT,CAAiB,UAAC1F,GAAD,EAAMG,CAAN,EAAY;YACzB,IAAIhC,EAAJ;;YACA,IAAIgC,CAAC,GAAG,CAAR,EAAW;cACP,CAAChC,EAAE,GAAGc,IAAI,CAACC,MAAX,MAAuB,IAAvB,IAA+Bf,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACwH,MAAH,CAAU3F,GAAG,CAACe,CAAd,EAAiBf,GAAG,CAACgB,CAArB,CAAxD;YACH;UACJ,CALD;;UAMA/B,IAAI,CAACC,MAAL,CAAY0G,SAAZ;QAnCO;;QAMX,uDAA+B;UAAA;;UAAA,yBAmBvB;QAWP;MApCU;QAAA;MAAA;QAAA;MAAA;IAqCd;;;;kFACD,kBAAkB9D,KAAlB;QAAA;QAAA;UAAA;YAAA;cAAA;gBACUxF,OADV,GACoB,KAAKA,OADzB;;gBAAA,KAEQA,OAAO,CAAC4G,GAFhB;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAGyB,KAAK2C,eAAL,CAAqBvJ,OAAO,CAAC4G,GAA7B,EAAkCpB,KAAlC,CAHzB;;cAAA;gBAGQ,KAAKpE,GAHb;gBAAA;gBAAA;;cAAA;gBAKS,IAAIpB,OAAO,CAACwJ,IAAZ,EAAkB;kBACbA,IADa,GACNxJ,OAAO,CAACwJ,IADF;;kBAGnB,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;oBACpB7G,IADoB,GACb6G,IAAI,CAAC7G,IAAL,YAAqB8G,KAArB,GACPD,IAAI,CAAC7G,IAAL,CAAU+G,GAAV,CAAc,UAACC,CAAD;sBAAA,2BAAmBA,CAAnB;oBAAA,CAAd,EAA0CC,IAA1C,CAA+C,EAA/C,CADO,uBAEKJ,IAAI,CAAC7G,IAFV,UADa;oBAIpBkH,UAJoB,GAIP,+EAJO;oBAK1B9D,GAAG,kBAAW8D,UAAX,sBAAgCL,IAAI,CAACrE,IAAL,CAAUvF,KAA1C,yBAA4D4J,IAAI,CAACrE,IAAL,CAAUxF,MAAtE,gBAAiFgD,IAAjF,WAAH;kBACH,CAND,MAOK;oBACDoD,GAAG,GAAGyD,IAAN;kBACH;;kBACD,KAAKpI,GAAL,GAAW,KAAK6F,YAAL,CAAkBlB,GAAlB,EAAuBP,KAAvB,CAAX;gBACH;;cAnBL;gBAoBI,KAAKsE,YAAL;;cApBJ;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;;;;AAuBJ9K,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B"},"metadata":{},"sourceType":"script"}